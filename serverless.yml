service: rimac-appointment-service

frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin

package:
  individually: true
  patterns:
    - "!node_modules/.prisma/**"
    - "!node_modules/@prisma/**"
    - "!tests/**"
    - "!coverage/**"
    - "!.build/**"
    - "!.serverless/**"
    - "!.git/**"
    - "!.github/**"
    - "!.husky/**"
    - "!.vscode/**"
    - "!**/*.test.ts"
    - "src/infrastructure/config/swagger.yml"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  deploymentBucket:
    maxVersions: 5
    blockPublicAccess: true
    versioning: false
  deploymentPrefix: serverless
  environment:
    NODE_OPTIONS: '--enable-source-maps'
    MYSQL_HOST_PE: ${env:MYSQL_HOST_PE}
    MYSQL_USER_PE: ${env:MYSQL_USER_PE}
    MYSQL_PASSWORD_PE: ${env:MYSQL_PASSWORD_PE}
    MYSQL_DATABASE_PE: ${env:MYSQL_DATABASE_PE}
    MYSQL_PORT_PE: ${env:MYSQL_PORT_PE}
    MYSQL_HOST_CL: ${env:MYSQL_HOST_CL}
    MYSQL_USER_CL: ${env:MYSQL_USER_CL}
    MYSQL_PASSWORD_CL: ${env:MYSQL_PASSWORD_CL}
    MYSQL_DATABASE_CL: ${env:MYSQL_DATABASE_CL}
    MYSQL_PORT_CL: ${env:MYSQL_PORT_CL}
    APPOINTMENTS_TABLE: appointments-${self:provider.stage}
    SNS_TOPIC_ARN: !Ref AppointmentTopic
    SQS_APPOINTMENT_PE_URL: !Ref AppointmentPeQueue
    SQS_APPOINTMENT_CL_URL: !Ref AppointmentClQueue
    SQS_CONFIRMATION_URL: !Ref ConfirmationQueue
    EVENT_BUS_NAME: !Ref AppointmentEventBus
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:UpdateItem
      Resource: !GetAtt AppointmentsTable.Arn
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: !Ref AppointmentTopic
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource:
        - !GetAtt AppointmentPeQueue.Arn
        - !GetAtt AppointmentClQueue.Arn
        - !GetAtt ConfirmationQueue.Arn
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource: !GetAtt AppointmentEventBus.Arn
    - Effect: Allow
      Action:
        - rds:*
      Resource: "*"

functions:
  createAppointment:
    handler: src/adapters/primary/handlers/appointment.handler
    timeout: 30
    events:
      - http:
          path: /appointments
          method: post
          cors: true

  getAppointments:
    handler: src/adapters/primary/handlers/appointment.handler
    events:
      - http:
          path: /appointments
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                insuredId: false
                countryIso: false

  processAppointmentPE:
    handler: src/adapters/primary/handlers/appointment-pe.handler
    events:
      - sqs:
          arn: !GetAtt AppointmentQueuePE.Arn

  processAppointmentCL:
    handler: src/adapters/primary/handlers/appointment-cl.handler
    events:
      - sqs:
          arn: !GetAtt AppointmentQueueCL.Arn

  swaggerUI:
    handler: src/adapters/primary/handlers/swagger.handler
    events:
      - http:
          path: /docs
          method: get
          cors: true
      - http:
          path: /docs/{proxy+}
          method: any
          cors: true

resources:
  Resources:
    AppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.APPOINTMENTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: insuredId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: insuredId-index
            KeySchema:
              - AttributeName: insuredId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    AppointmentTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: appointment-topic-${self:provider.stage}

    AppointmentPeSnsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref AppointmentTopic
        Protocol: sqs
        Endpoint: !GetAtt AppointmentPeQueue.Arn
        FilterPolicy:
          countryISO:
            - PE

    AppointmentClSnsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref AppointmentTopic
        Protocol: sqs
        Endpoint: !GetAtt AppointmentClQueue.Arn
        FilterPolicy:
          countryISO:
            - CL

    AppointmentPeQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: appointment-pe-queue-${self:provider.stage}
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 300

    AppointmentClQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: appointment-cl-queue-${self:provider.stage}
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 300

    ConfirmationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: confirmation-queue-${self:provider.stage}
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 300

    AppointmentPeQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "sqs:SendMessage"
              Resource: !GetAtt AppointmentPeQueue.Arn
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref AppointmentTopic
        Queues:
          - !Ref AppointmentPeQueue

    AppointmentClQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "sqs:SendMessage"
              Resource: !GetAtt AppointmentClQueue.Arn
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref AppointmentTopic
        Queues:
          - !Ref AppointmentClQueue

    AppointmentEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: appointment-event-bus-${self:provider.stage}

    AppointmentConfirmationRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Ref AppointmentEventBus
        EventPattern:
          source:
            - "appointment.service"
          detail-type:
            - "AppointmentConfirmed"
        State: ENABLED
        Targets:
          - Arn: !GetAtt ConfirmationQueue.Arn
            Id: "AppointmentConfirmationTarget"

    EventBusToSqsPermission:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: "sqs:SendMessage"
              Resource: !GetAtt ConfirmationQueue.Arn
              Condition:
                ArnEquals:
                  "aws:SourceArn": !GetAtt AppointmentConfirmationRule.Arn
        Queues:
          - !Ref ConfirmationQueue

    AppointmentTopicPE:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: appointments-pe-${self:provider.stage}

    AppointmentTopicCL:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: appointments-cl-${self:provider.stage}

    AppointmentQueuePE:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: appointments-pe-${self:provider.stage}
        VisibilityTimeout: 30
        MessageRetentionPeriod: 345600

    AppointmentQueueCL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: appointments-cl-${self:provider.stage}
        VisibilityTimeout: 30
        MessageRetentionPeriod: 345600

    AppointmentSubscriptionPE:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref AppointmentTopicPE
        Protocol: sqs
        Endpoint: !GetAtt AppointmentQueuePE.Arn

    AppointmentSubscriptionCL:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref AppointmentTopicCL
        Protocol: sqs
        Endpoint: !GetAtt AppointmentQueueCL.Arn

    AppointmentQueuePEPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref AppointmentQueuePE
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: sqs:SendMessage
              Resource: !GetAtt AppointmentQueuePE.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AppointmentTopicPE

    AppointmentQueueCLPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref AppointmentQueueCL
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: sqs:SendMessage
              Resource: !GetAtt AppointmentQueueCL.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AppointmentTopicCL

custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    target: 'node18'
    platform: 'node'
    external:
      - '@aws-sdk/client-dynamodb'
      - '@aws-sdk/client-sns'
      - '@aws-sdk/client-sqs'
      - '@aws-sdk/client-eventbridge'
      - '@aws-sdk/lib-dynamodb'
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true