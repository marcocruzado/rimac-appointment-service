service: rimac-appointment-service

frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin

package:
  individually: true
  patterns:
    - "!node_modules/.prisma/**"
    - "!node_modules/@prisma/**"
    - "!tests/**"
    - "!coverage/**"
    - "!.build/**"
    - "!.serverless/**"
    - "!.git/**"
    - "!**/*.test.ts"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    APPOINTMENTS_TABLE: ${self:service}-appointments-${opt:stage, self:provider.stage}
    SNS_TOPIC_ARN: 
      Ref: AppointmentTopic
    MYSQL_HOST_PE: ${env:MYSQL_HOST_PE}
    MYSQL_USER_PE: ${env:MYSQL_USER_PE}
    MYSQL_PASSWORD_PE: ${env:MYSQL_PASSWORD_PE}
    MYSQL_DATABASE_PE: ${env:MYSQL_DATABASE_PE}
    MYSQL_HOST_CL: ${env:MYSQL_HOST_CL}
    MYSQL_USER_CL: ${env:MYSQL_USER_CL}
    MYSQL_PASSWORD_CL: ${env:MYSQL_PASSWORD_CL}
    MYSQL_DATABASE_CL: ${env:MYSQL_DATABASE_CL}
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: 
            Fn::GetAtt: [AppointmentTopic, TopicArn]
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
          Resource: 
            - Fn::GetAtt: [AppointmentsTable, Arn]
            - Fn::Join:
                - ''
                - - Fn::GetAtt: [AppointmentsTable, Arn]
                  - '/index/*'

functions:
  createAppointment:
    handler: src/adapters/handlers/createAppointment.handler
    events:
      - http:
          path: /appointments
          method: post
          cors: true

  processConfirmation:
    handler: src/adapters/handlers/processConfirmation.handler
    events:
      - sns:
          arn: arn:aws:sns:${aws:region}:${aws:accountId}:${self:service}-appointments-${self:provider.stage}
          filterPolicy:
            countryIso:
              - PE
              - CL

  getAppointment:
    handler: src/adapters/handlers/getAppointment.handler
    events:
      - http:
          path: /appointments/{appointmentId}/country/{country}
          method: get
          cors: true

  updateAppointment:
    handler: src/adapters/handlers/updateAppointment.handler
    events:
      - http:
          path: /appointments/{appointmentId}/country/{country}
          method: put
          cors: true

  deleteAppointment:
    handler: src/adapters/handlers/deleteAppointment.handler
    events:
      - http:
          path: /appointments/{appointmentId}/country/{country}
          method: delete
          cors: true

  listAppointments:
    handler: src/adapters/handlers/listAppointments.handler
    events:
      - http:
          path: /appointments
          method: get
          cors: true

  swagger:
    handler: src/adapters/handlers/swagger.handler
    events:
      - http:
          path: /swagger
          method: get
          cors: true

custom:
  serverless-offline:
    httpPort: 3000
  serverless-plugin-typescript:
    tsConfigFileLocation: './tsconfig.json'

resources:
  Resources:
    AppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.APPOINTMENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: insuredId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: insuredId-index
            KeySchema:
              - AttributeName: insuredId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    AppointmentTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-appointments-${self:provider.stage}